from building import *

CWD = GetCurrentDir()
objs = Glob('src/*.c')

objsVXL = Glob('src/vxlapi/*.cpp')

Import('BUILD_DIR')


@register_library
class LibraryCanLib(Library):
    def config_peakcan(self):
        peakcan = Package(
            'https://www.peak-system.com/fileadmin/media/files/pcan-basic.zip')
        self.CPPPATH += ['%s/PCAN-Basic API/Include' % (peakcan)]
        shutil.copy('%s/PCAN-Basic API/x64/VC_LIB/PCANBasic.lib' %
                    (peakcan), '%s/libPCANBasic.a' % (BUILD_DIR))
        dll = '%s/mingw64/bin/PCANBasic.dll' % (os.getenv('MSYS2'))
        if not os.path.isfile(dll):
            shutil.copy('%s/PCAN-Basic API/x64/PCANBasic.dll' %
                        (peakcan), dll)
        self.LIBS += ['PCANBasic']
        self.LIBPATH += [BUILD_DIR]

    def config_vxl(self):
        self.CPPPATH += ['%s/src/vxlapi' % (CWD)]
        self.CPPDEFINES += ['DYNAMIC_XLDRIVER_DLL']
        self.source += objsVXL

    def config_zlg(self):
        pkg = Package(
            'https://www.zlg.cn/data/upload/software/Can/CAN_lib.rar')
        ControlCAN = Glob('%s/ControlCAN*/ControlCANx64' % (pkg))[0].rstr()
        self.LIBS += ['dl']
        self.CPPPATH += [ControlCAN]

    def config(self):
        self.include = '%s/include' % (CWD)
        self.CPPPATH = ['$INFRAS']
        self.CPPDEFINES = []
        self.LIBPATH = []
        self.LIBS = ['TcpIp', 'StdTimer']
        self.CPPFLAGS = []
        self.source = objs
        if IsBuildForWindows():
            self.LIBS += ['wsock32']
            self.config_peakcan()
            self.config_vxl()
            self.config_zlg()


objsCanSim = Glob('utils/can_simulator.c')


@register_application
class ApplicationCanSimulator(Application):
    def config(self):
        self.CPPPATH = ['$INFRAS']
        if IsBuildForWindows():
            self.LIBS = ['wsock32', 'winmm']
        self.source = objsCanSim


objsCanDump = Glob('utils/can_dump.c')


@register_application
class ApplicationCanDump(Application):
    def config(self):
        self.LIBS = ['CanLib']
        self.CPPPATH = ['$INFRAS']
        self.source = objsCanDump


objsCanSend = Glob('utils/can_send.c')


@register_application
class ApplicationCanSend(Application):
    def config(self):
        self.LIBS = ['CanLib']
        self.CPPPATH = ['$INFRAS']
        self.source = objsCanSend
